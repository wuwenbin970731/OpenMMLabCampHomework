{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA TITAN Xp\nCUDA_HOME: /data/cuda/cuda-10.0/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.13\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMClassification: 0.25.0+3d4f80d", "seed": 1741079689, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV3', arch='large'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='StackedLinearClsHead',\n        num_classes=5,\n        in_channels=960,\n        mid_channels=[1280],\n        dropout_rate=0.2,\n        act_cfg=dict(type='HSwish'),\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        init_cfg=dict(\n            type='Normal', layer='Linear', mean=0.0, std=0.01, bias=0.0),\n        topk=(1, )))\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224, backend='pillow'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1), backend='pillow'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/mobilenet_v3_large-3ea3c186.pth'\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=2, gamma=0.973, by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nwork_dir = './work_dirs/mobilenet-v3-large_8xb32_flower'\ngpu_ids = range(0, 8)\ndevice = 'cuda'\nseed = 1741079689\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "val", "epoch": 1, "iter": 6, "lr": 0.001, "accuracy_top-1": 37.06647}
{"mode": "val", "epoch": 2, "iter": 6, "lr": 0.001, "accuracy_top-1": 67.84682}
{"mode": "val", "epoch": 3, "iter": 6, "lr": 0.00097, "accuracy_top-1": 77.67342}
{"mode": "val", "epoch": 4, "iter": 6, "lr": 0.00097, "accuracy_top-1": 83.45376}
{"mode": "val", "epoch": 5, "iter": 6, "lr": 0.00095, "accuracy_top-1": 86.19942}
{"mode": "val", "epoch": 6, "iter": 6, "lr": 0.00095, "accuracy_top-1": 88.72832}
{"mode": "val", "epoch": 7, "iter": 6, "lr": 0.00092, "accuracy_top-1": 90.17342}
{"mode": "val", "epoch": 8, "iter": 6, "lr": 0.00092, "accuracy_top-1": 91.54624}
{"mode": "val", "epoch": 9, "iter": 6, "lr": 0.0009, "accuracy_top-1": 91.97977}
{"mode": "val", "epoch": 10, "iter": 6, "lr": 0.0009, "accuracy_top-1": 92.4133}
{"mode": "val", "epoch": 11, "iter": 6, "lr": 0.00087, "accuracy_top-1": 92.99133}
{"mode": "val", "epoch": 12, "iter": 6, "lr": 0.00087, "accuracy_top-1": 93.28035}
{"mode": "val", "epoch": 13, "iter": 6, "lr": 0.00085, "accuracy_top-1": 93.78613}
{"mode": "val", "epoch": 14, "iter": 6, "lr": 0.00085, "accuracy_top-1": 93.93064}
{"mode": "val", "epoch": 15, "iter": 6, "lr": 0.00083, "accuracy_top-1": 94.1474}
{"mode": "val", "epoch": 16, "iter": 6, "lr": 0.00083, "accuracy_top-1": 94.43642}
{"mode": "val", "epoch": 17, "iter": 6, "lr": 0.0008, "accuracy_top-1": 94.79769}
{"mode": "val", "epoch": 18, "iter": 6, "lr": 0.0008, "accuracy_top-1": 94.86994}
{"mode": "val", "epoch": 19, "iter": 6, "lr": 0.00078, "accuracy_top-1": 95.15897}
{"mode": "val", "epoch": 20, "iter": 6, "lr": 0.00078, "accuracy_top-1": 95.23122}
{"mode": "val", "epoch": 21, "iter": 6, "lr": 0.00076, "accuracy_top-1": 95.37572}
{"mode": "val", "epoch": 22, "iter": 6, "lr": 0.00076, "accuracy_top-1": 95.59249}
{"mode": "val", "epoch": 23, "iter": 6, "lr": 0.00074, "accuracy_top-1": 95.59249}
{"mode": "val", "epoch": 24, "iter": 6, "lr": 0.00074, "accuracy_top-1": 95.66474}
{"mode": "val", "epoch": 25, "iter": 6, "lr": 0.00072, "accuracy_top-1": 95.66474}
{"mode": "val", "epoch": 26, "iter": 6, "lr": 0.00072, "accuracy_top-1": 95.44798}
{"mode": "val", "epoch": 27, "iter": 6, "lr": 0.0007, "accuracy_top-1": 95.737}
{"mode": "val", "epoch": 28, "iter": 6, "lr": 0.0007, "accuracy_top-1": 95.80925}
{"mode": "val", "epoch": 29, "iter": 6, "lr": 0.00068, "accuracy_top-1": 96.02602}
{"mode": "val", "epoch": 30, "iter": 6, "lr": 0.00068, "accuracy_top-1": 96.02602}
{"mode": "val", "epoch": 31, "iter": 6, "lr": 0.00066, "accuracy_top-1": 96.09827}
{"mode": "val", "epoch": 32, "iter": 6, "lr": 0.00066, "accuracy_top-1": 96.09827}
{"mode": "val", "epoch": 33, "iter": 6, "lr": 0.00065, "accuracy_top-1": 96.24277}
{"mode": "val", "epoch": 34, "iter": 6, "lr": 0.00065, "accuracy_top-1": 96.31503}
{"mode": "val", "epoch": 35, "iter": 6, "lr": 0.00063, "accuracy_top-1": 96.31503}
{"mode": "val", "epoch": 36, "iter": 6, "lr": 0.00063, "accuracy_top-1": 96.53179}
{"mode": "val", "epoch": 37, "iter": 6, "lr": 0.00061, "accuracy_top-1": 96.45954}
{"mode": "val", "epoch": 38, "iter": 6, "lr": 0.00061, "accuracy_top-1": 96.53179}
{"mode": "val", "epoch": 39, "iter": 6, "lr": 0.00059, "accuracy_top-1": 96.60405}
{"mode": "val", "epoch": 40, "iter": 6, "lr": 0.00059, "accuracy_top-1": 96.60405}
{"mode": "val", "epoch": 41, "iter": 6, "lr": 0.00058, "accuracy_top-1": 96.53179}
{"mode": "val", "epoch": 42, "iter": 6, "lr": 0.00058, "accuracy_top-1": 96.6763}
{"mode": "val", "epoch": 43, "iter": 6, "lr": 0.00056, "accuracy_top-1": 96.82081}
{"mode": "val", "epoch": 44, "iter": 6, "lr": 0.00056, "accuracy_top-1": 96.6763}
{"mode": "val", "epoch": 45, "iter": 6, "lr": 0.00055, "accuracy_top-1": 96.60405}
{"mode": "val", "epoch": 46, "iter": 6, "lr": 0.00055, "accuracy_top-1": 96.60405}
{"mode": "val", "epoch": 47, "iter": 6, "lr": 0.00053, "accuracy_top-1": 96.82081}
{"mode": "val", "epoch": 48, "iter": 6, "lr": 0.00053, "accuracy_top-1": 96.74856}
{"mode": "val", "epoch": 49, "iter": 6, "lr": 0.00052, "accuracy_top-1": 96.82081}
{"mode": "val", "epoch": 50, "iter": 6, "lr": 0.00052, "accuracy_top-1": 96.82081}
